A Website that creates Apps based on prompts , 
    Can create React-Native Based Applications
    Can Edit Files with inbuilt Vs-like code editor 
    Can Test it on Web or App

React Native Expo 
Expo Router
LLM - Multiplayer games architecture 
Simple Approach 

Agent - Tells LLM to do something on behalf of user 
Prompt Engineering


Tech Stack
Next.js
Bun 
ASG on AWS 
LLM APIs 



Overview 
    Building a Website that lets people to build Mobile Apps using AI 
    bolt is the first company to do it 
    Users can see the demo on the Web or on Mobile as well in real time 
    Any Change made in the App , Ships eveything in Real time and can test it on both website and phone
    Can export it into .apk and can publish on Google Play Store


React Native architecture
    A bunch of tsx or jsx files, These are react native components 
    div is replaced by <View> , <Text> for writing texts instead of span or more 
    All gets Bundled into a bundle.js file using metro bundles [Similar to webpack or babel as in react ]
        budle.js is all that is needed to run a Mobile App , The state of Mobile app is defined by the bundle.js file 

    Serving React native file is simple as serving a bundle.js , Easier than bundling Swift/Java/Kotlin Applications 
    Written in Javascript , View transalates to Something else as in Androind app 
    React Native Application 
        A Native thread that is talking to JS code bundle.js , Tells native layer or dictattes how the app is workgin or rendering 
        .apk files also have a js code , bundler.js 

    In React native we only serve js file bundle.js , in website we serve html,css and js 

High Level Architecture
    Frontend ---(Create an App Prompt)--> Primary Backend ---> LLM [Talk to LLM with an exact prompt]
    LLM --> Backend[Where to store files? ], WHen user is on frontend, they can see the Code on the right 


System Architecture 

Primary Frontend -------> Primary Backend 
[New Arena for apps]    [Simple Auth and retrieves]

Until the Arean environemtn si opened, we are interacting with the backend 
After entering the Arena 
    Backend should not do anything , It will SPin a new machine Worker Machine , Let the frontend know the worker machine is whatever ip address 
    Any Prompts and Talks is directly with the worker servers 
    Worker Machine interacts with LLM and generates Chess Application 
    LLM Gives the responses and code 
    Users Frontend is connected to worker with remote VS instance 
        We needed an independent WOrker because Worker has to do a lot of things 
            Run Vs Code Instantly and remotely
            Talk to LLM,
            Enrich the File System 
            Backup all the data to S3, Have backup of Vs Code 
    
    Based on Multiple Users we have multiple Workers based on Arena Screens 
        Each User is interacting with their Worker 
        When Session is closed, we will stop the worker 

        Heart Beating - Machine hits worker every 5 seconds , WOrker response [Ping Pong message]
            Tells Worker there is someone there , If there is no Heartbeat received over 5 min , User has left and it kills the worker it self 

    If Collaborative features,  
        All Devs get connected to same Worker machine 
        Kills only if all are left 

URL or QR to test on phone , It is servinf the bundle.js to preview 
    They get js file from worker machine 
    expo , Will expose the app or js file to a URL


Router Architecture 
    Get Decidated Compute for Mulitple People working on same project , FOr Multiplayer or Collaborative features 

    Frontned --> Primary BE 
        User Requests Arena , Primary backend needs to be aware of all workers that are up and it needs to fetch one of the worker and assign it 

    Another Backend Called Router 
        Routes To a specific Worker 
        Worker needs to make sure there is enough compute 
            If no one on Website , it has to tell AWS , to Keep a Buffer count/ Warm Pool Count - 3 
                If zero users , there are still 3 workers available to serve to a user immediatelt 
            THe 3 workers keeps hearbeating to the router , saying tis available and you can assign a arena 

        Starter script , Start http server that tells router that worker is up 
            Stores the workers url on a server [Redis Server ]
            FE Directly communicates with router and then assigns one server 
            Router keeps track of the machines or availabl eworkers
            Room id is also shared , that spins up the arena for specific workers

            Worker makes sure Arena is working fine , By Communication and Serving files and storing files, LLM INteraction and more 
            What if Worker fails,
                Then it will reassign a new machine 
                Rotuer is connected to user via web socket server 


            Keep Talkign to AWS and Router such thatAlways there has to be 3 free machines , 
                If one Occupied , AWS has to add more worker machine and then assign to Arena 

    Worst Thing: 
        More Cloud Bills , Based on Traffic 
        Need to have compute ready 
        Wait for 5 minutes to Cool Down




High Level Architecture
    Primary FE in React 
    Primary BE in Nodejs
    Routing Service that interacts directly through APIS to AWS 
    Primary Postgres s Database 
    Redis Space where routers are tracked for workers 
    Field of AWS machines where we are running Rremote VS code instance, Taling to LLM, Backup files to S3, Self Destruct , INteract with AWS and Router 

Clerk for Authentication
Bun for Backend 









